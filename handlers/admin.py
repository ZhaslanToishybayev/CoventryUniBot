from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_IDS, MESSAGES
from keyboards import get_main_menu_keyboard, get_admin_menu_keyboard
from database import db

async def create_event_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    text = update.message.text
    
    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if text.startswith('/create_event'):
        event_data = text[13:].strip()  # –£–±–∏—Ä–∞–µ–º '/create_event '
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/create_event –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | YYYY-MM-DD`",
            parse_mode='Markdown',
            reply_markup=get_admin_menu_keyboard()
        )
        return
    
    if not event_data:
        await update.message.reply_text(
            "üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n"
            "`/create_event –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è | –û–ø–∏—Å–∞–Ω–∏–µ | YYYY-MM-DD`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/create_event –õ–µ–∫—Ü–∏—è –ø–æ AI | –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ª–µ–∫—Ü–∏—è –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ | 2024-02-15`",
            parse_mode='Markdown',
            reply_markup=get_admin_menu_keyboard()
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        parts = [part.strip() for part in event_data.split('|')]
        
        if len(parts) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        
        title = parts[0]
        description = parts[1] if len(parts) > 1 else ""
        date = parts[2] if len(parts) > 2 else None
        
        if not title:
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_id = db.create_event(title, description, date, user_id)
        
        if event_id:
            text = f"‚úÖ *–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!*\n\n"
            text += f"üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            if description:
                text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            if date:
                text += f"üìÜ –î–∞—Ç–∞: {date}\n"
            text += f"üÜî ID —Å–æ–±—ã—Ç–∏—è: #{event_id}"
            
            await update.message.reply_text(
                text,
                parse_mode='Markdown',
                reply_markup=get_admin_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_admin_menu_keyboard()
            )
    
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/create_event –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | YYYY-MM-DD`\n\n"
            "–í—Å–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º `|`",
            parse_mode='Markdown',
            reply_markup=get_admin_menu_keyboard()
        )

async def add_faq_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    text = update.message.text
    
    if text.startswith('/add_faq'):
        faq_data = text[8:].strip()  # –£–±–∏—Ä–∞–µ–º '/add_faq '
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_faq –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç`",
            parse_mode='Markdown',
            reply_markup=get_admin_menu_keyboard()
        )
        return
    
    if not faq_data:
        await update.message.reply_text(
            "üìù –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n"
            "`/add_faq –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/add_faq –ö–∞–∫ –ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã? | –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω –ø–æ—Ä—Ç–∞–ª`",
            parse_mode='Markdown',
            reply_markup=get_admin_menu_keyboard()
        )
        return
    
    try:
        parts = [part.strip() for part in faq_data.split('|')]
        
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π")
        
        question, answer = parts
        
        if not question or not answer:
            raise ValueError("–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º FAQ –≤ –±–∞–∑—É
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('INSERT INTO faq (question, answer) VALUES (?, ?)', (question, answer))
        conn.commit()
        faq_id = cursor.lastrowid
        conn.close()
        
        text = f"‚úÖ *FAQ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n"
        text += f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n\n"
        text += f"üí¨ –û—Ç–≤–µ—Ç: {answer}\n\n"
        text += f"üÜî ID: #{faq_id}"
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=get_admin_menu_keyboard()
        )
    
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_faq –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç`\n\n"
            "–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º `|`",
            parse_mode='Markdown',
            reply_markup=get_admin_menu_keyboard()
        )

async def admin_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    help_text = """
üë®‚Äçüíº *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*

üìÖ *–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π:*
`/create_event –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | YYYY-MM-DD`

‚ùì *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ:*
`/add_faq –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç`

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
–î–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

*–ü—Ä–∏–º–µ—Ä—ã:*
`/create_event –õ–µ–∫—Ü–∏—è –ø–æ AI | –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ª–µ–∫—Ü–∏—è | 2024-02-15`
`/add_faq –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å? | –ü–æ–¥–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–Ω–ª–∞–π–Ω`

*–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:*
‚Ä¢ –í—Å–µ —á–∞—Å—Ç–∏ –∫–æ–º–∞–Ω–¥ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º `|`
‚Ä¢ –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
‚Ä¢ –°–æ–±—ã—Ç–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ FAQ —Å—Ä–∞–∑—É —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
    """
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=get_admin_menu_keyboard()
    )
