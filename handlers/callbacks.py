from telegram import Update
from telegram.ext import ContextTypes
from config import MESSAGES, ADMIN_IDS
from keyboards import (
    get_main_menu_keyboard, get_admin_menu_keyboard, get_faq_keyboard, 
    get_faq_answer_keyboard, get_clubs_keyboard, get_rooms_keyboard,
    get_date_keyboard, get_time_slots_keyboard, get_events_keyboard,
    get_admin_panel_keyboard
)
from database import db

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    main_keyboard = get_admin_menu_keyboard() if user_id in ADMIN_IDS else get_main_menu_keyboard()
    
    try:
        if data == "back_to_main":
            await query.edit_message_text(
                MESSAGES['start'],
                reply_markup=main_keyboard
            )
        
        elif data == "faq":
            await query.edit_message_text(
                MESSAGES['faq_title'],
                reply_markup=get_faq_keyboard()
            )
        
        elif data.startswith("faq_"):
            faq_id = int(data.split("_")[1])
            faq_data = db.get_faq_by_id(faq_id)
            
            if faq_data:
                _, question, answer = faq_data
                text = f"‚ùì *{question}*\n\n{answer}"
                await query.edit_message_text(
                    text,
                    parse_mode='Markdown',
                    reply_markup=get_faq_answer_keyboard()
                )
        
        elif data == "booking":
            await query.edit_message_text(
                MESSAGES['booking_title'],
                reply_markup=get_clubs_keyboard()
            )
        
        elif data.startswith("club_"):
            club_id = int(data.split("_")[1])
            clubs = db.get_all_clubs()
            club_name = next((name for cid, name, _ in clubs if cid == club_id), "–ö–ª—É–±")
            
            text = f"üìù *{club_name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:"
            await query.edit_message_text(
                text,
                parse_mode='Markdown',
                reply_markup=get_rooms_keyboard(club_id)
            )
        
        elif data.startswith("room_"):
            room_id = int(data.split("_")[1])
            text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"
            await query.edit_message_text(
                text,
                reply_markup=get_date_keyboard(room_id)
            )
        
        elif data.startswith("date_"):
            parts = data.split("_")
            room_id = int(parts[1])
            date = parts[2]
            
            text = f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date}:"
            await query.edit_message_text(
                text,
                reply_markup=get_time_slots_keyboard(room_id, date)
            )
        
        elif data.startswith("book_"):
            await handle_booking(query, data)
        
        elif data == "events":
            await query.edit_message_text(
                "üìÖ *–°–æ–±—ã—Ç–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞:*",
                parse_mode='Markdown',
                reply_markup=get_events_keyboard()
            )
        
        elif data.startswith("event_"):
            event_id = int(data.split("_")[1])
            events = db.get_all_events()
            event = next((e for e in events if e[0] == event_id), None)
            
            if event:
                _, title, description, date = event
                text = f"üìÖ *{title}*\n\n"
                if description:
                    text += f"{description}\n\n"
                if date:
                    text += f"üìÜ –î–∞—Ç–∞: {date}"
                
                await query.edit_message_text(
                    text,
                    parse_mode='Markdown',
                    reply_markup=get_events_keyboard()
                )
        
        elif data == "admin_panel" and user_id in ADMIN_IDS:
            await query.edit_message_text(
                MESSAGES['admin_panel'],
                reply_markup=get_admin_panel_keyboard()
            )
        
        elif data == "create_event" and user_id in ADMIN_IDS:
            await query.edit_message_text(
                "üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "`/create_event –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è | –û–ø–∏—Å–∞–Ω–∏–µ | YYYY-MM-DD`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`/create_event –õ–µ–∫—Ü–∏—è –ø–æ AI | –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ª–µ–∫—Ü–∏—è –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ | 2024-02-15`",
                parse_mode='Markdown',
                reply_markup=get_admin_panel_keyboard()
            )
        
        elif data == "admin_stats" and user_id in ADMIN_IDS:
            await show_admin_stats(query)
    
    except Exception as e:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_keyboard
        )

async def handle_booking(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        parts = data.split("_")
        room_id = int(parts[1])
        date = parts[2]
        time_slot = parts[3]
        
        start_time, end_time = time_slot.split("-")
        user_id = query.from_user.id
        
        booking_id = db.create_booking(user_id, room_id, date, start_time, end_time)
        
        if booking_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –∏ –∫–ª—É–±–µ
            rooms = db.get_rooms_by_club(None)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
            room_info = None
            for room in rooms:
                if room[0] == room_id:
                    room_info = room
                    break
            
            clubs = db.get_all_clubs()
            club_name = "–ö–ª—É–±"
            if room_info:
                for club in clubs:
                    club_rooms = db.get_rooms_by_club(club[0])
                    if any(r[0] == room_id for r in club_rooms):
                        club_name = club[1]
                        break
            
            text = f"‚úÖ *–ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
            text += f"üè¢ –ö–ª—É–±: {club_name}\n"
            text += f"üö™ –ö–æ–º–Ω–∞—Ç–∞: {room_info[1] if room_info else 'N/A'}\n"
            text += f"üìÖ –î–∞—Ç–∞: {date}\n"
            text += f"‚è∞ –í—Ä–µ–º—è: {time_slot}\n\n"
            text += f"ID –±—Ä–æ–Ω–∏: #{booking_id}"
            
            await query.edit_message_text(
                text,
                parse_mode='Markdown',
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await query.edit_message_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_main_menu_keyboard()
            )
    
    except Exception as e:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )

async def show_admin_stats(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        cursor.execute("SELECT COUNT(*) FROM bookings WHERE status = 'active'")
        active_bookings = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FAQ
        cursor.execute("SELECT COUNT(*) FROM faq")
        faq_count = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
        cursor.execute("SELECT COUNT(*) FROM events")
        events_count = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(DISTINCT user_id) FROM bookings")
        unique_users = cursor.fetchone()[0]
        
        conn.close()
        
        text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
        text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n"
        text += f"üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {active_bookings}\n"
        text += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –≤ FAQ: {faq_count}\n"
        text += f"üìÖ –°–æ–±—ã—Ç–∏–π: {events_count}\n"
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=get_admin_panel_keyboard()
        )
    
    except Exception as e:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_admin_panel_keyboard()
        )
